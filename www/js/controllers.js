// Generated by CoffeeScript 1.8.0
(function() {
  var app, baseUrl,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  app = angular.module("hcMobile.controllers", []);

  if (window.cordova) {
    baseUrl = 'http://homeclub.us/api';
  } else {
    baseUrl = '/api';
  }

  app.controller("DashCtrl", function($scope, latest, SessionFactory) {
    $scope.currentUser = SessionFactory.getSession();
    $scope.refreshLatest = function() {
      return latest.get({
        sensorHubMacAddresses: $scope.currentUser.gateways[0].sensorHubs
      }, function(data) {
        return $scope.latest = data;
      });
    };
    return $scope.refreshLatest();
  });

  app.controller('SensorSetupCtrl', function($scope, customeraccount, meta, sensorhub, SessionFactory, $rootScope, resolvedCustomerAccount) {
    $scope.currentUser = SessionFactory.getSession();
    $scope.customerAccount = new customeraccount(resolvedCustomerAccount.data);
    $scope.meta = meta;
    sensorhub.query({
      sensorHubMacAddresses: $scope.currentUser.gateways[0].sensorHubs
    }, function(sensorHubs) {
      return $scope.sensorHubs = sensorHubs;
    });
    if (!$scope.customerAccount.mutedSensorCategories) {
      $scope.customerAccount.mutedSensorCategories = {};
    }
    $scope.mutedCategories = function(shMacAddress) {
      return $scope.customerAccount.mutedSensorCategories[shMacAddress] || [];
    };
    $scope.checkIfMuted = function(shMacAddress, category) {
      var mutedCategories;
      mutedCategories = $scope.mutedCategories(shMacAddress);
      return __indexOf.call(mutedCategories, category) >= 0;
    };
    $scope.categoryIsNotMuted = function(shMacAddress, category) {
      var isMuted;
      isMuted = $scope.checkIfMuted(shMacAddress, category);
      return !isMuted;
    };
    $scope.toggleMuted = function(shMacAddress, category) {
      var mutedCategories;
      mutedCategories = $scope.mutedCategories(shMacAddress);
      if (__indexOf.call(mutedCategories, category) >= 0) {
        return $scope.customerAccount.mutedSensorCategories[shMacAddress].splice(mutedCategories.indexOf(category), 1);
      } else {
        if (!$scope.customerAccount.mutedSensorCategories[shMacAddress]) {
          $scope.customerAccount.mutedSensorCategories[shMacAddress] = [];
        }
        return $scope.customerAccount.mutedSensorCategories[shMacAddress].push(category);
      }
    };
    return $scope.save = function() {
      $scope.sensorHubs.forEach(function(sensorHub) {
        return sensorHub.$update();
      });
      return $scope.customerAccount.$update(function(customerAccount) {
        return $rootScope.toast('Saved');
      });
    };
  });

  app.controller('SignInCtrl', function($scope, $state, $http, $rootScope, AuthFactory, SessionFactory, sensorhub, meta) {
    return $scope.login = function(user) {
      $rootScope.showLoading("Authenticating..");
      return AuthFactory.login(user).success(function(data) {
        return $http.get(baseUrl + '/me/customer-account').success(function(currentUser) {
          return sensorhub.query({
            sensorHubMacAddresses: currentUser.gateways[0].sensorHubs
          }, function(sensorHubs) {
            currentUser.roomNamesBySensorHubMacAddress = {};
            sensorHubs.forEach(function(sensorHub) {
              var name;
              name = meta.roomTypes[sensorHub.roomType] || meta.sensorHubTypes[String(sensorHub.sensorHubType)];
              return this[sensorHub._id] = name;
            }, currentUser.roomNamesBySensorHubMacAddress);
            SessionFactory.createSession(currentUser);
            $state.go('app.dash');
            return $rootScope.hideLoading();
          });
        });
      }).error(function(data) {
        $rootScope.hideLoading();
        return $rootScope.toast('Invalid Credentials');
      });
    };
  });

}).call(this);
